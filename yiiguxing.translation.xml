<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="584" />
    <option name="newTranslationDialogX" value="622" />
    <option name="newTranslationDialogY" value="342" />
    <option name="pinNewTranslationDialog" value="true" />
    <histories>
      <item value="MILLISECONDS" />
      <item value="The name of a factory method to use to create this object. Use constructor-arg elements to specify arguments to the factory method, if it takes arguments. Autowiring does not apply to factory methods. If the &quot;class&quot; attribute is present, the factory method will be a static method on the class specified by the &quot;class&quot; attribute on this bean definition. Often this will be the same class as that of the constructed object - for example, when the factory method is used as an alternative to a constructor. However, it may be on a different class. In that case, the created object will not be of the class specified in the &quot;class&quot; attribute. This is analogous to FactoryBean behavior. If the &quot;factory-bean&quot; attribute is present, the &quot;class&quot; attribute is not used, and the factory method will be an instance method on the object returned from a getBean call with the specified bean name. The factory bean may be defined as a singleton or a prototype. The factory method can have any number of arguments. Autowiring is not supported. Use indexed constructor-arg elements in conjunction with the factory-method attribute. Setter Injection can be used in conjunction with a factory method. Method Injection cannot, as the factory method returns an instance, which will be used when the container creates the bean." />
      <item value="The name of the custom destroy method to invoke on bean factory shutdown. The method must have no arguments, but may throw any exception. This is an alternative to implementing Spring's DisposableBean interface or the standard Java CloseableAutoCloseable interface, or marking a method with the PreDestroy annotation. Note: Only invoked on beans whose lifecycle is under the full control of the factory - which is always the case for singletons, but not guaranteed for any other scope." />
      <item value="Can be used to create one or more aliases illegal in an (XML) id. Multiple aliases can be separated by any number of spaces, commas, or semi-colons (or indeed any mixture of the three)." />
      <item value="o match for this type name: com.itheima.dao [Xlint:invalidAbsoluteTypeName] at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)" />
      <item value="Unsatisfied" />
      <item value="true" />
      <item value="initialized" />
      <item value="register the natives via the static initializer." />
      <item value="The name of a factory method to use to create this object. Use constructor-arg elements to specify arguments to the factory method, if it takes arguments. Autowiring does not apply to factory methods. If the &quot;class&quot; attribute is present, the factory method will be a static method on the class specified by the &quot;class&quot; attribute on this bean definition. Often this will be the same class as that of the constructed object - for example, when the factory method is used as an alternative to a constructor. However, it may be on a different class. In that case, the created object will not be of the class specified in the &quot;class&quot; attribute. This is analogous to FactoryBean behavior." />
      <item value="foo" />
      <item value="foot" />
      <item value="Singletons are most commonly used, and are ideal for multi-threaded&#10;&#9;service objects. Further scopes, such as &quot;request&quot; or &quot;session&quot;, might&#10;&#9;be supported by extended bean factories (e.g. in a web environment)." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="8" />
        <entry key="ENGLISH" value="9" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1634525863465" />
  </component>
  <component name="Settings">
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="13bb20da62b1370f " />
      </youdao-translate>
    </option>
  </component>
</application>